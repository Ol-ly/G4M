#ifndef DEFINE_SPECIES
#define DEFINE_SPECIES

//#include <iostream>
//#include "../g4m/increment/increment.h"
#include "ageStruct.cpp"
using namespace std;

//int main(int argc, char **argv) {

void defineSpecies(g4m::incrementTab *species[8])
//void defineSpecies(void)
{
       
       
  double mai = 1.5;
//  g4m::incrementCurves *species[8];
//1 / 0 - fir  
  species[0]=new g4m::incrementTab(-0.4562,-0.7403,-1.0772,1.4803,0.6713,300,-0.2151,-0.9929,0.5,0.2,-0.7642,0.3156,-0.4,0.4468,0.1425,0,0,0,0.25,-1,-2,-0.5,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,24.82935,0.60708,-0.0212,2.41308,-0.48246,16.11,17.78,-0.01436,0.37424,-1.52401,2.282,1.2718,-0.7707,1.6,0.95,5, 0.25, 600, 1, 0.25, 1.5, 0.25, 1.);
//    species[0]=new g4m::incrementTab(-0.4562,-0.7403,-1.0772,1.4803,0.6713,300,-0.2151,-0.9929,0.5,0.2,-0.7642,0.3156,-0.4,0.4468,0.1425,0,0,0,0.25,-1,-2,-0.5,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,24.82935,0.60708,-0.0212,2.41308,-0.48246,16.11,17.78,-0.01436,0.37424,-1.52401,2.282,1.2718,-0.7707,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);
//2 / 1 - spruce
  species[1]=new g4m::incrementTab(0,-0.9082,-0.2728,0.6483,209.6889,300,1.8536,0.4811,0,0.9,-0.143,-0.5915,-0.4,0.4507,0.3713,0,0,0,0.1,1,-2,-0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,22.58866,0.6168,-0.02102,2.4176,-0.35816,16.11,17.78,-0.01436,0.37424,-1.52401,2.282,1.2718,-0.7707,1.6,0.95,5, 0.25, 600, 1, 0.25, 1.5, 0.25, 1);  
//  species[1]=new g4m::incrementTab(0,-0.9082,-0.2728,0.6483,209.6889,300,1.8536,0.4811,0,0.9,-0.143,-0.5915,-0.4,0.4507,0.3713,0,0,0,0.1,1,-2,-0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,22.58866,0.6168,-0.02102,2.4176,-0.35816,16.11,17.78,-0.01436,0.37424,-1.52401,2.282,1.2718,-0.7707,1.6,0.95,5, 0.25, 600, 1, 0.25, 1.5, 0.25, 1.);  
//    species[1]=new g4m::incrementTab(0,-0.9082,-0.2728,0.6483,209.6889,300,1.8536,0.4811,0,0.9,-0.143,-0.5915,-0.4,0.4507,0.3713,0,0,0,0.1,1,-2,-0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,22.58866,0.6168,-0.02102,2.4176,-0.35816,16.11,17.78,-0.01436,0.37424,-1.52401,2.282,1.2718,-0.7707,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);  
	//3 / 2 - pine
//  species[2]=new g4m::incrementTab
//    (-0.3835, -0.2416, -1.7576, 1.1638,         //k
//     170, 114.343, -2.804, 1.044,               //tMax
//     0., 0.9, -0.8242, -0.4273,                 //maxDens0
//     -0.4, -1.476, 4.283, -0.3, 3.610, -1.071,  //maxDens1
//     0.1, 1., -2.0670, -0.3028,                     //maxDens2
//     0.5,                                       //maxDens3
//     1.5, 150, 0.01, 0.5, 0.5,                  //imul0
//     0.8, 1./500., 2., 0.01, 0.5,               //imul0
//     22.09082, 0.62065, -0.01965, 1.50614, -0.25346, //h
//     22.70, 16.56,                              //d0
//     -0.01068, 0.24754, -1.81373,               //d1
//     1.0945, 0.0999, -1.6033,                   //d2
//     1.6,                                       //dmul
//     0.95,                                      //iCrit
////     0.25, 600, 1, 0.25, 1.5, 0.25, 10.);
//     0.25, 600, 300, 0.25, 1.5, 0.25, 10.);

    species[2]=new g4m::incrementTab
    (-0.3835, -0.2416, -1.7576, 1.1638,         //k
     170, 114.343, -2.804, 1.044,               //tMax
     0., 0.9, -0.8242, -0.4273,                     //maxDens0
     -0.4, -1.476, 4.283, -0.3, 3.610, -1.071,  //maxDens1
     0.1, 1., -2.0670, -0.3028,                 //maxDens2
     0.5,                                       //maxDens3
     1.5, 150, 0.01, 0.5, 0.5,                  //imul0
     0.8, 1./500., 2., 0.01, 0.5,               //imul0
     22.09082, 0.62065, -0.01965, 1.50614, -0.25346, //h
     22.70, 16.56,                              //d0
     -0.01068, 0.24754, -1.81373,               //d1
     1.0945, 0.0999, -1.6033,                   //d2
     1.6,                                       //dmul
     0.95,                                      //iCrit
     5.,      //maiMax
     0.25,   //maiStep
     600,    //tMax
     1,      //tStep
     0.25,   //sdNatStep
     1.5,    //sdTabMax
     0.25,   //sdTabStep
     1.);    //timeframe


//4 / 3 -  pinus Halepensis 
  species[3]=new g4m::incrementTab(-0.3,-0.306,-2.052,1.673,150,130,1.898,-1.141,0.92,0.07,-4.25,6.168,-0.4,0.93237,-0.00468,0,0,0,0.25,-1.,-2,-0.5,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,26.59488,0.62839,-0.02023,1.05953,-0.03489,18.7252,46.3833,-0.2643,14.1425,-0.6368,0.8948,0.000422233,-4.9625,1.6,0.95, 5,0.25, 600, 1, 0.25, 1.5, 0.25, 1.);
//    species[3]=new g4m::incrementTab(-0.3,-0.306,-2.052,1.673,150,130,1.898,-1.141,0.92,0.07,-4.25,6.168,-0.4,0.93237,-0.00468,0,0,0,0.25,-1.,-2,-0.5,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,26.59488,0.62839,-0.02023,1.05953,-0.03489,18.7252,46.3833,-0.2643,14.1425,-0.6368,0.8948,0.000422233,-4.9625,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);
  //5 / 4 - birch
  species[4]=new g4m::incrementTab(0,-0.7422,-0.54,0.5719,136.958,100,0.2972,-0.7543,0,0.9,-0.953,-0.9236,-0.4,1.052,0.108,0,0,0,0.1,1,-2.5,-0.4,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,23.23597,0.44554,-0.02485,1.36973,-0.42941,13.61,10.69,-0.02688,0.24196,-0.7015,1.337,0.0708,-2.1515,1.6,0.95,5, 0.25, 600, 1, 0.25, 1.5, 0.25, 1.);
//    species[4]=new g4m::incrementTab(0,-0.7422,-0.54,0.5719,136.958,100,0.2972,-0.7543,0,0.9,-0.953,-0.9236,-0.4,1.052,0.108,0,0,0,0.1,1,-2.5,-0.4,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,23.23597,0.44554,-0.02485,1.36973,-0.42941,13.61,10.69,-0.02688,0.24196,-0.7015,1.337,0.0708,-2.1515,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);
  //6 / 5 - beech
  species[5]=new g4m::incrementTab(0,-0.5998,-0.2467,0.7674,245.5516,100,2.6345,-0.8978,0.69135,0,0,0,-0.03177,0,0,0,0,0,1./8.-1.,1,0,0,0.5,1.5,300,0.01,0.5,0.5,0.8,1./1000.,2,0.01,0.5,21.29459,0.48722,-0.01967,1.81479,-0.29145,30.707,7.008,-0.01051,-0.19793,0.2977,1.423,1.025,-16.85,1.6,0.95, 5,0.25, 600, 1, 0.25, 1.5, 0.25, 1.);
//    species[5]=new g4m::incrementTab(0,-0.5998,-0.2467,0.7674,245.5516,100,2.6345,-0.8978,0.69135,0,0,0,-0.03177,0,0,0,0,0,1./8.-1.,1,0,0,0.5,1.5,300,0.01,0.5,0.5,0.8,1./1000.,2,0.01,0.5,21.29459,0.48722,-0.01967,1.81479,-0.29145,30.707,7.008,-0.01051,-0.19793,0.2977,1.423,1.025,-16.85,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);
//7 / 6 - oak
  species[6]=new g4m::incrementTab(0,-0.6,-0.4419,0.3179,16.6688,300,-0.6066,-1.1243,0.7,0.3,-0.4339,0.5288,-0.4,2.01561,-0.07354,0,0,0,0.1,1,-3.5,0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,21.26281,0.51987,-0.01901,1.34081,-0.10979,-7.511,41.689,-0.02201,0.58055,1.72465,3.6757,1.7544,0.3264,1.6,0.95,5, 0.25, 600, 1, 0.25, 1.5, 0.25, 1.);
//    species[6]=new g4m::incrementTab(0,-0.6,-0.4419,0.3179,16.6688,300,-0.6066,-1.1243,0.7,0.3,-0.4339,0.5288,-0.4,2.01561,-0.07354,0,0,0,0.1,1,-3.5,0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,21.26281,0.51987,-0.01901,1.34081,-0.10979,-7.511,41.689,-0.02201,0.58055,1.72465,3.6757,1.7544,0.3264,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);
//8 / 7 - larch
  species[7]=new g4m::incrementTab(0,-0.388,-0.01226,0.85934,195.3724,600,0.9883,1.0784,0,0.9,-2.1347,-0.3437,-0.4,1.3238,0.4061,0,0,0,0.1,1,-2.5,-0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,23.63487,0.50281,-0.01557,1.16199,-0.18673,25.196,9.118,-0.01376,0.64637,-0.79909,1.0817,0.1667,-0.9408,1.6,0.95,5, 0.25, 600, 1, 0.25, 1.5, 0.25, 1.);
//    species[7]=new g4m::incrementTab(0,-0.388,-0.01226,0.85934,195.3724,600,0.9883,1.0784,0,0.9,-2.1347,-0.3437,-0.4,1.3238,0.4061,0,0,0,0.1,1,-2.5,-0.3,0.5,1.5,150,0.01,0.5,0.5,0.8,1./500.,2,0.01,0.5,23.63487,0.50281,-0.01557,1.16199,-0.18673,25.196,9.118,-0.01376,0.64637,-0.79909,1.0817,0.1667,-0.9408,1.6,0.95, 0.25, 600, 300, 0.25, 1.5, 0.25, 10.);
//------------------------------------------------------------------------------------------
/*
  std::cout.precision(3);

  cout << "GWL" << endl;
  cout << "age\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=400; i+=10) {
    cout << i
	 << "\t" << species[2]->gTcp(i)
	 << "\t" << species[5]->gTcp(i)
	 << "\t" << species[4]->gTcp(i)
	 << "\t" << species[0]->gTcp(i)
	 << "\t" << species[7]->gTcp(i)
	 << "\t" << species[6]->gTcp(i)
	 << "\t" << species[1]->gTcp(i)
	 << endl;
  }

  cout << endl;
  cout << "Stocking Biomass unmanaged" << endl;
  cout << "age\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=400; i+=10) {
    cout << i
	 << "\t" << species[2]->gTcp(i) * species[2]->gMaxDens(i)
	 << "\t" << species[5]->gTcp(i) * species[5]->gMaxDens(i)
	 << "\t" << species[4]->gTcp(i) * species[4]->gMaxDens(i)
	 << "\t" << species[0]->gTcp(i) * species[0]->gMaxDens(i)
	 << "\t" << species[7]->gTcp(i) * species[7]->gMaxDens(i)
	 << "\t" << species[6]->gTcp(i) * species[6]->gMaxDens(i)
	 << "\t" << species[1]->gTcp(i) * species[1]->gMaxDens(i)
	 << endl;
  }

  cout << endl;
  cout << "Share of stocking Biomass to GWL" << endl;
  cout << "age\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=400; i+=10) {
    cout << i
	 << "\t" << species[2]->gMaxDens(i)
	 << "\t" << species[5]->gMaxDens(i)
	 << "\t" << species[4]->gMaxDens(i)
	 << "\t" << species[0]->gMaxDens(i)
	 << "\t" << species[7]->gMaxDens(i)
	 << "\t" << species[6]->gMaxDens(i)
	 << "\t" << species[1]->gMaxDens(i)
	 << endl;
  }

  cout << endl;
  cout << "Managed stocking degre" << endl;
  cout << "age\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=400; i+=10) {
    cout << i
	 << "\t" << species[2]->gManDens(i)
	 << "\t" << species[5]->gManDens(i)
	 << "\t" << species[4]->gManDens(i)
	 << "\t" << species[0]->gManDens(i)
	 << "\t" << species[7]->gManDens(i)
	 << "\t" << species[6]->gManDens(i)
	 << "\t" << species[1]->gManDens(i)
	 << endl;
  }

  cout << endl;
  cout << "Tree height" << endl;
  cout << "age\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=400; i+=10) {
    cout << i
	 << "\t" << species[2]->gH(i)
	 << "\t" << species[5]->gH(i)
	 << "\t" << species[4]->gH(i)
	 << "\t" << species[0]->gH(i)
	 << "\t" << species[7]->gH(i)
	 << "\t" << species[6]->gH(i)
	 << "\t" << species[1]->gH(i)
	 << endl;
  }

  cout << endl;
  cout << "Tree diameter" << endl;
  cout << "age\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=400; i+=10) {
    cout << i
	 << "\t" << species[2]->gD(i)
	 << "\t" << species[5]->gD(i)
	 << "\t" << species[4]->gD(i)
	 << "\t" << species[0]->gD(i)
	 << "\t" << species[7]->gD(i)
	 << "\t" << species[6]->gD(i)
	 << "\t" << species[1]->gD(i)
	 << endl;
  }

  cout << endl;
  cout << "Diameter multiplyer" << endl;
  cout << "sd\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=10; ++i) {
    cout << i/10.
	 << "\t" << species[2]->gDmul(i/10.)
	 << "\t" << species[5]->gDmul(i/10.)
	 << "\t" << species[4]->gDmul(i/10.)
	 << "\t" << species[0]->gDmul(i/10.)
	 << "\t" << species[7]->gDmul(i/10.)
	 << "\t" << species[6]->gDmul(i/10.)
	 << "\t" << species[1]->gDmul(i/10.)
	 << endl;
  }

  cout << endl;
  cout << "Increment multiplyer" << endl;
  cout << "sd\tt\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=0; i<=10; i+=2) {
    for(int t=0; t<=150; t+=50) {
      cout << i/10.
	   << "\t" << t
	   << "\t" << species[2]->gImul(i/10., t)
	   << "\t" << species[5]->gImul(i/10., t)
	   << "\t" << species[4]->gImul(i/10., t)
	   << "\t" << species[0]->gImul(i/10., t)
	   << "\t" << species[7]->gImul(i/10., t)
	   << "\t" << species[6]->gImul(i/10., t)
	   << "\t" << species[1]->gImul(i/10., t)
	   << endl;
    }
  }

  cout << endl;
  cout << "Optimal rotation time" << endl;
  cout << "MAI\tpine\tbeech\tbirch\tfir\tlarch\toak\tspruce" << endl;
  for(int i=1; i<=5; ++i) {
    species[2]->setMai(i/2.);
    species[5]->setMai(i/2.);
    species[4]->setMai(i/2.);
    species[0]->setMai(i/2.);
    species[7]->setMai(i/2.);
    species[6]->setMai(i/2.);
    species[1]->setMai(i/2.);
    cout << i/2.
	 << "\t" << species[2]->gTOpt()
	 << "\t" << species[5]->gTOpt()
	 << "\t" << species[4]->gTOpt()
	 << "\t" << species[0]->gTOpt()
	 << "\t" << species[7]->gTOpt()
	 << "\t" << species[6]->gTOpt()
	 << "\t" << species[1]->gTOpt()
	 << endl;
  }
*/
//  return(0);
}
#endif